type Market @entity {
  id: ID! # {pairAddress}
  inputTokens: [String!]! # Tokens that need to be deposited to take a position in protocol
  outputToken: String # Token that is minted to track ownership of position in protocol
}

type MarketDayData @entity {
  " marketAddress + dayId "
  id: ID!

  " first trade of the day timestamp "
  timestamp: BigInt!

  " market id "
  market: Market!

  " swap volume -> amount of input tokens swapped in or out  "
  inputTokensDailySwapVolume: [BigInt!]!

  " total amount of reserves per input token "
  inputTokenTotalBalances: [BigInt!]!

  " reserve amount per input token this day "
  inputTokenDailyInflow: [BigInt!]!

  " reserve amount per input token this day "
  inputTokenDailyOutflow: [BigInt!]!

  " total balance of LP tokens "
  outputTokenTotalBalance: BigInt!

  " amount of LP tokens minted this day "
  outputTokenDailyInflowVolume: BigInt!

  " amount of LP tokens burned this day "
  outputTokenDailyOutflowVolume: BigInt!

  " number of TXs this day swap "
  dailySwapTXs: BigInt!

  " number of TXs this day mint "
  dailyMintTXs: BigInt!

  " number of TXs this day burn "
  dailyBurnTXs: BigInt!
}

############# Uniswap specific entities

type Pair @entity {
  id: ID! # {pairAddress}
  factory: String!
  token0: String!
  token1: String!
  reserve0: BigInt!
  reserve1: BigInt!
  totalSupply: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
}
