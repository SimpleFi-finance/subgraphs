# Common entities for all protocols

enum Blockchain {
  ETHEREUM
  BSC
  XDAI
  POLYGON
  OPTIMISM
  AVALANCHE
  NEAR
}

enum TokenStandard {
  ERC20
  ERC721
  ERC1155
}

enum ProtocolName {
  UNISWAP_V2
  SUSHISWAP
  SUSHISWAP_FARM
}

enum ProtocolType {
  STAKING
  LENDING
  EXCHANGE
  INSURANCE
  STABLECOIN
  DERIVATIVE
  SYNTHETIC_TOKEN
  TOKEN_MANAGEMENT # Meta LP vaults
  PREDICTION_MARKET
}

enum PositionType {
  INVESTMENT
  DEBT
}

enum TransactionType {
  INVEST
  REDEEM
  BORROW
  REPAY
  TRANSFER_IN
  TRANSFER_OUT
}

type Account @entity {
  id: ID! # {accountAddress}
  positions: [Position!]! @derivedFrom(field: "account")
}

type Token @entity {
  id: ID! # {tokenAddress}
  tokenStandard: TokenStandard!
  name: String
  symbol: String
  decimals: Int
  mintedByMarket: Market
  blockNumber: BigInt! # could be block at which we got first event on this token
  timestamp: BigInt!
}

type Market @entity {
  id: ID! # {protocol pair/pool/vault address}
  account: Account!
  protocolName: ProtocolName!
  protocolType: ProtocolType!
  # Generally protocols accept one or multiple tokens and mint tokens to the depositor to track ownership
  # Some protocols reward DAO tokens or other incentivisation tokens to holders of LP tokens
  # Some protocols don't mint any tokens to track ownership, in that case outputToken is null
  # and inputToken balances are used to calculate returns
  inputTokens: [Token!]! # Tokens that need to be deposited to take a position in protocol
  outputToken: Token # Token that is minted to track ownership of position in protocol
  rewardTokens: [Token!] # Aditional tokens that are given as reward for position in a protocol
  inputTokenTotalBalances: [String!]! # Total balance of this market contract of all input tokens in TokenBalance string format
  outputTokenTotalSupply: BigInt! # Total supply of output token
  blockNumber: BigInt!
  timestamp: BigInt!
  positions: [Position!]! @derivedFrom(field: "market")
  history: [MarketSnapshot!]! @derivedFrom(field: "market")
}

type MarketSnapshot @entity {
  id: ID! # {trasactionHash}{logIndex}
  market: Market!
  inputTokenBalances: [String!]! # TokenBalance string format
  outputTokenTotalSupply: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
  transactionHash: String!
  transactionIndexInBlock: BigInt!
  logIndex: BigInt!
}

type Transaction @entity {
  id: ID! # {account}{transactionHash}{logIndex}
  transactionHash: Bytes!
  market: Market!
  marketSnapshot: MarketSnapshot!
  # A transaction.from is always transaction origin because outside EVM transaction.origin and msg.sender are same
  from: Account!
  to: Account
  # token amounts will always be positive here, Their credit or debit status will change based on transaction type
  transactionType: TransactionType!
  inputTokenAmounts: [String!]!
  outputTokenAmount: BigInt!
  rewardTokenAmounts: [String!]!
  transferredFrom: String
  transferredTo: String
  gasUsed: BigInt!
  gasPrice: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
  transactionIndexInBlock: BigInt!
}

# String format for a TokenBalance
# tokenAddress|accountAddress|tokenAmountBigInt

# It is required because we want to keep track of closed positions as well
# We can not use same ID for a user's new position after existing one has been closed
# To be able to fetch current open position for a user + market + position type we need
# ID to be dependent on only these three things. There three things will be same for all positions
# of a specific user in specfic market therefore we need this AccountPosition entity
type AccountPosition @entity {
  id: ID! # {userAddress}{marketAddress}{positionType}
  positionCounter: BigInt!
  positions: [Position!]! @derivedFrom(field: "accountPosition")
}

# We can not keep balances and roi updated all the time.
# We can update these only when the account of the position makes some changes in the position
# at others time when market variables are changing because of other's actions then we won't update these
type Position @entity {
  id: ID! # {accountPositionId}{autoIncrement}
  accountPosition: AccountPosition!
  account: Account!
  accountAddress: String!
  market: Market!
  marketAddress: String!
  positionType: PositionType!
  outputTokenBalance: BigInt!
  inputTokenBalances: [String!]! # TokenBalance string format
  rewardTokenBalances: [String!]! # TokenBalance string format
  transferredTo: [String!]!
  closed: Boolean!
  blockNumber: BigInt!
  timestamp: BigInt!
  historyCounter: BigInt!
  history: [PositionSnapshot!]! @derivedFrom(field: "position")
}

# Created before every update (transaction) to Position
type PositionSnapshot @entity {
  id: ID! # {positionId}{autoIncrement}
  position: Position!
  transaction: Transaction!
  outputTokenBalance: BigInt!
  inputTokenBalances: [String!]! # TokenBalance string format
  rewardTokenBalances: [String!]! # TokenBalance string format
  transferredTo: [String!]! # TokenBalance string format
}

# END - Common entities for all protocols

# Sushiswap farm protocol entities

type SushiFarm @entity {
  " masterchef-farmPid "
  id: ID!

  " pid of the farm/pool assigned by the masterChef "
  farmPid: BigInt!

  " masterchef contract address "
  masterChef: MasterChef!

  " sushi LP token which is farm's input token "
  lpToken: Token!

  " contract which tracks and distributes extra reward tokens  "
  rewarder: Rewarder

  " amount of sushi to distribute per block. "
  allocPoint: BigInt!

  " total amount of LP tokens provided to farm "
  totalSupply: BigInt!

  " last block number where sushi distribution occurs. "
  lastRewardBlock: BigInt!

  " accumulated amount of sushi per share"
  accSushiPerShare: BigInt!

  " creation timestamp "
  created: BigInt!

  " creation block number "
  createdAtBlock: BigInt!

  " creation transaction "
  createdAtTransaction: Bytes!
}

type SushiFarmSnapshot @entity {
  " trasactionHash-logIndex "
  id: ID!

  " pid of the farm/pool assigned by the masterChef "
  farmPid: BigInt!

  " farm of which snapshot is taken "
  sushiFarm: SushiFarm!

  " amount of sushi to distribute per block. "
  allocPoint: BigInt!

  " total amount of LP tokens provided to farm "
  totalSupply: BigInt!

  " snapshot timestamp "
  timestamp: BigInt!

  " block number in which snapshot is taken "
  blockNumber: BigInt!

  " transaction in which snapshot is taken "
  transactionHash: String!

  " index of transaction in block "
  transactionIndexInBlock: BigInt!

  " snapshot log index "
  logIndex: BigInt!
}

type UserInfo @entity {
  " usersAddress-farmPID"
  id: ID!

  " user taking positions in farm "
  user: Account!

  " farm to which user position belongs to "
  farm: SushiFarm!

  " LP token amount the user has provided "
  amount: BigInt!

  " amount of SUSHI entitled to the user "
  rewardDebt: BigInt!
}

type FarmDeposit @entity {
  " transactionHash-logIndex "
  id: ID!

  " transaction in which deposit took place "
  transactionHash: String!

  " farm to which LP tokens are deposited "
  sushiFarm: SushiFarm!

  " account which performed the deposit "
  depositer: Account!

  " receiver of `amount` deposit benefit "
  depositReceiver: Account

  " LP token amount to deposit "
  amount: BigInt!
}

type FarmWithdrawal @entity {
  " transactionHash-logIndex "
  id: ID!

  " transaction in which withdrawal took place "
  transactionHash: String!

  " farm from which LP tokens are withdrawn "
  sushiFarm: SushiFarm!

  " account which performed the withdrawal "
  withdrawer: Account!

  " receiver of LP tokens "
  withdrawalReceiver: Account

  " LP token amount to withdraw "
  amount: BigInt!
}

type SushiRewardTransfer @entity {
  " transactionHash-receiver "
  id: ID!

  " transaction in which transfer took place "
  transactionHash: String!

  " sender is the MasterChef when Sushi is rewarded "
  from: Account!

  " receiver of Sushi reward "
  to: Account

  " amount of rewarded Sushi "
  value: BigInt!
}

type ExtraRewardTokenTransfer @entity {
  " transactionHash-tokenAddress "
  id: ID!

  " transaction in which transfer took place "
  transactionHash: String!

  " token rewarded in addition to Sushi "
  rewardToken: Token!

  " sender is the Rewarder contract "
  from: Account!

  " receiver of token reward "
  to: Account

  " amount of rewarded tokens "
  value: BigInt!
}

type MasterChef @entity {
  " contract address "
  id: ID!

  " masterchef contract version "
  version: BigInt!

  " address of sushi token"
  sushi: Token!

  " total number of farms/pools this masterChef is tracking "
  numberOfFarms: BigInt!

  " sum of all allocation points in all farms "
  totalAllocPoint: BigInt!

  " sushi tokens created per block "
  sushiPerBlock: BigInt!

  " block number when bonus Sushi period ends "
  bonusEndBlock: BigInt

  " bonus muliplier for early sushi makers "
  bonusMultiplier: BigInt

  " block at which we updated reward balances for every open position "
  lastBlockRewardBalancesUpdated: BigInt!
}

type Rewarder @entity {
  " contract address "
  id: ID!
}

type PositionTracker @entity {
  " address of the masterchef for which positions are tracked "
  id: ID!

  " list of all user positions opened in masterchef's farms "
  positions: [Position!]!
}

# END - Sushiswap farm protocol entities
