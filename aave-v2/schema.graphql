# Common entities for all protocols

enum Blockchain {
  ETHEREUM
  BSC
  XDAI
  POLYGON
  OPTIMISM
  AVALANCHE
  NEAR
}

enum TokenStandard {
  ERC20
  ERC721
  ERC1155
}

enum ProtocolName {
  UNISWAP_V2
  CURVE_POOL
  AAVE_POOL
}

enum ProtocolType {
  STAKING
  LENDING
  DEBT
  EXCHANGE
  INSURANCE
  STABLECOIN
  DERIVATIVE
  SYNTHETIC_TOKEN
  TOKEN_MANAGEMENT # Meta LP vaults
  PREDICTION_MARKET
}

enum PositionType {
  INVESTMENT
  DEBT
}

enum TransactionType {
  INVEST
  REDEEM
  BORROW
  REPAY
  TRANSFER_IN
  TRANSFER_OUT
}

type Account @entity {
  id: ID! # {accountAddress}
  positions: [Position!]! @derivedFrom(field: "account")
}

type Token @entity {
  id: ID! # {tokenAddress}
  tokenStandard: TokenStandard!
  name: String
  symbol: String
  decimals: Int
  mintedByMarket: Market
  blockNumber: BigInt! # could be block at which we got first event on this token
  timestamp: BigInt!
}

type Market @entity {
  id: ID! # {protocol pool/pool/vault address}
  account: Account!
  protocolName: ProtocolName!
  protocolType: ProtocolType!
  # Generally protocols accept one or multiple tokens and mint tokens to the depositor to track ownership
  # Some protocols reward DAO tokens or other incentivisation tokens to holders of LP tokens
  # Some protocols don't mint any tokens to track ownership, in that case outputToken is null
  # and inputToken balances are used to calculate returns
  inputTokens: [Token!]! # Tokens that need to be deposited to take a position in protocol
  outputToken: Token # Token that is minted to track ownership of position in protocol
  rewardTokens: [Token!] # Aditional tokens that are given as reward for position in a protocol
  inputTokenTotalBalances: [String!]! # Total balance of this market contract of all input tokens in TokenBalance string format
  outputTokenTotalSupply: BigInt! # Total supply of output token
  balanceMultiplier: BigInt # optional; defines multiplier to derive inputTokenBalance from outputTokenBalance of a user
  blockNumber: BigInt!
  timestamp: BigInt!
  positions: [Position!]! @derivedFrom(field: "market")
  history: [MarketSnapshot!]! @derivedFrom(field: "market")
}

type MarketSnapshot @entity {
  id: ID! # {trasactionHash}{logIndex}
  market: Market!
  inputTokenBalances: [String!]! # TokenBalance string format
  outputTokenTotalSupply: BigInt!
  balanceMultiplier: BigInt # optional; defines multiplier to derive inputTokenBalance from outputTokenBalance of a user
  blockNumber: BigInt!
  timestamp: BigInt!
  transactionHash: String!
  transactionIndexInBlock: BigInt!
  logIndex: BigInt!
}

type Transaction @entity {
  id: ID! # {account}{transactionHash}{logIndex}
  transactionHash: Bytes!
  market: Market!
  marketSnapshot: MarketSnapshot!
  # A transaction.from is always transaction origin because outside EVM transaction.origin and msg.sender are same
  from: Account!
  to: Account
  # token amounts will always be positive here, Their credit or debit status will change based on transaction type
  transactionType: TransactionType!
  inputTokenAmounts: [String!]!
  outputTokenAmount: BigInt!
  rewardTokenAmounts: [String!]!
  transferredFrom: String
  transferredTo: String
  gasUsed: BigInt!
  gasPrice: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
  transactionIndexInBlock: BigInt!
}

# String format for a TokenBalance
# tokenAddress|accountAddress|tokenAmountBigInt

# It is required because we want to keep track of closed positions as well
# We can not use same ID for a user's new position after existing one has been closed
# To be able to fetch current open position for a user + market + position type we need
# ID to be dependent on only these three things. There three things will be same for all positions
# of a specific user in specfic market therefore we need this AccountPosition entity
type AccountPosition @entity {
  id: ID! # {userAddress}{marketAddress}{positionType}
  positionCounter: BigInt!
  positions: [Position!]! @derivedFrom(field: "accountPosition")
}

# We can not keep balances and roi updated all the time.
# We can update these only when the account of the position makes some changes in the position
# at others time when market variables are changing because of other's actions then we won't update these
type Position @entity {
  id: ID! # {accountPositionId}{autoIncrement}
  accountPosition: AccountPosition!
  account: Account!
  accountAddress: String!
  market: Market!
  marketAddress: String!
  positionType: PositionType!
  outputTokenBalance: BigInt!
  inputTokenBalances: [String!]! # TokenBalance string format
  rewardTokenBalances: [String!]! # TokenBalance string format
  closed: Boolean!
  blockNumber: BigInt!
  timestamp: BigInt!
  historyCounter: BigInt!
  history: [PositionSnapshot!]! @derivedFrom(field: "position")
}

# Created before every update (transaction) to Position
type PositionSnapshot @entity {
  id: ID! # {positionId}{autoIncrement}
  position: Position!
  transaction: Transaction!
  outputTokenBalance: BigInt!
  inputTokenBalances: [String!]! # TokenBalance string format
  rewardTokenBalances: [String!]! # TokenBalance string format
}

# END - Common entities for all protocols

# Aave protocol entities

type LendingPoolAddressesProvider @entity {
  " contract address "
  id: ID!

  " contract address "
  address: String!

  " address of price oracle contract"
  priceOracle: String!
}

type LendingPool @entity {
  " address of lending pool contract "
  id: ID!

  " address of lending pool contract "
  address: String!

  " contract address of address provider "
  addressProvider: String!
}

type Reserve @entity {
  " lendingPool-asset "
  id: ID!

  " underlying asset "
  asset: String!

  " underlying asset decimals "
  assetDecimals: Int!

  " lending pool to which reserve belongs "
  lendingPool: LendingPool!

  " address of aToken for this reserve "
  aToken: String!

  " address of sToken for this reserve "
  stableDebtToken: String!

  " address of vToken for this reserve "
  variableDebtToken: String!

  " used to determine aToken balance "
  liquidityIndex: BigInt!

  " used to determine liquidity index "
  liquidityRate: BigInt!

  " used to determine vToken balance "
  variableBorrowIndex: BigInt!

  " used to determine variableBorrowIndex "
  variableBorrowRate: BigInt!

  " used to determine sToken balance "
  stableBorrowRate: BigInt!

  " loan-to-value ratio for this reserve "
  ltv: BigInt!

  " underlying asset price in eth "
  assetUnitPriceInEth: BigInt!

  " timestamp of last update "
  lastUpdateTimestamp: BigInt!
}

type UserAccountData @entity {
  " address "
  id: ID!

  " Aave user "
  user: Account!

  " user's average loan-to-value "
  ltv: BigInt!

  " user's collateral priced in eth "
  totalCollateralEth: BigInt!

  " user's debt priced in eth "
  totalDebtETH: BigInt!

  " available debt priced in eth "
  availableBorrowsETH: BigInt!

  " liquidation threshold of the user "
  currentLiquidationThreshold: BigInt!

  " user's health factor based on amount of collateral and debt "
  healthFactor: BigInt!

  " timestamp data was updated last time "
  lastUpdateTimestamp: BigInt!
}

type UserRewardBalance @entity {
  " user address "
  id: ID!

  " amount of unclaimed reward tokens "
  unclaimedRewards: BigInt!

  " amount of claimed reward tokens "
  claimedRewards: BigInt!

  " total amount of rewards entitled to user "
  lifetimeRewards: BigInt!
}

type UserInvestmentBalance @entity {
  " userAddress-marketId"
  id: ID!

  " user taking positions in pool "
  user: Account!

  " reserve to which user position belongs to "
  reserve: Reserve!

  " total aToken balance -> amount of underlying asset tokens that can be redeemed "
  aTokenBalance: BigInt!

  " principal amount of aTokens without the interest "
  scaledATokenBalance: BigInt!
}

type UserDebtBalance @entity {
  " userAddress-marketId"
  id: ID!

  " user taking debt "
  user: Account!

  " reserve in which debt is taken "
  reserve: Reserve!

  " scaled amount of debt tokens "
  scaledDebtTokenBalance: BigInt!

  " amount of underlying asset tokens borrowed "
  amountBorrowedBalance: BigInt!

  " either stable or variable rate mode "
  rateMode: Int!
}

type AToken @entity {
  " erc20 address "
  id: ID!

  " asset this aToken is derived from "
  underlyingAsset: String!

  " aave treasury "
  treasury: String!

  " address of contract which distributes rewards "
  incentivesController: String!

  " address of lending pool to which aToken belongs "
  lendingPool: String!

  " erc20 name "
  aTokenName: String!

  " erc20 symbol "
  aTokenSymbol: String!

  " erc20 decimals "
  aTokenDecimals: Int!
}

type VariableDebtToken @entity {
  " erc20 address "
  id: ID!

  " asset for which variable rate debt is tracked "
  underlyingAsset: String!

  " address of lending pool to which underlying asset belongs "
  lendingPool: String!

  " address of contract which distributes rewards "
  incentivesController: String!

  " erc20 name "
  debtTokenName: String!

  " erc20 symbol "
  debtTokenSymbol: String!

  " erc20 decimals "
  debtTokenDecimals: Int!
}

type StableDebtToken @entity {
  " erc20 address "
  id: ID!

  " asset for which variable rate debt is tracked "
  underlyingAsset: String!

  " address of lending pool to which underlying asset belongs "
  lendingPool: String!

  " address of contract which distributes rewards "
  incentivesController: String!

  " erc20 name "
  debtTokenName: String!

  " erc20 name "
  debtTokenSymbol: String!

  " erc20 decimals "
  debtTokenDecimals: Int!
}

type IncentivesController @entity {
  " address of the incentives controller contract "
  id: ID!

  " erc20 token in which users are rewarded "
  rewardToken: Token!

  " end of rewards distribution "
  emissionEndTimestamp: BigInt!

  " lending pool whose users are rewarded "
  lendingPool: LendingPool!
}

type Deposit @entity {
  " TX-logIndex "
  id: ID!

  " msg.sender "
  user: String!

  " deposit receiver "
  onBehalfOf: String!

  " asset being deposited "
  reserve: String!

  " amount of underlying asset deposited "
  amount: BigInt!

  " used for 3rd party tracking "
  referral: BigInt!

  " TX where deposit occured "
  transactionHash: String!
}

type Withdrawal @entity {
  " TX-logIndex "
  id: ID!

  " user whose deposit is withdrawn "
  user: String!

  " underlying asset receiver "
  to: String!

  " underlying asset being withdrawn "
  reserve: String!

  " amount of aToken burned / asset withdrawn "
  amount: BigInt!

  " TX where withdrawal occured "
  transactionHash: String!
}

type Borrow @entity {
  " TX-logIndex "
  id: ID!

  " msg.sender "
  user: String!

  " receiver of debt tokens "
  onBehalfOf: String!

  " underlying asset being borrowed "
  reserve: String!

  " amount of asset borrowed "
  amount: BigInt!

  " 1->stable, 2->variable"
  borrowRateMode: Int!
}

type Repay @entity {
  " TX-logIndex "
  id: ID!

  " msg.sender "
  user: String!

  " user whose debt is being repaid "
  repayer: String!

  " asset being repaid "
  reserve: String!

  " amount of debt repaid "
  amount: BigInt!

  " 1->stable, 2->variable"
  rateMode: Int!
}

type SwapRateMode @entity {
  " TX-logIndex "
  id: ID!

  " msg.sender "
  user: String!

  " debt asset "
  reserve: String!

  " 1->stable, 2->variable"
  rateMode: Int!

  " TX where rate mode swap occured "
  transactionHash: String!
}

type FlashLoan @entity {
  " TX-logIndex "
  id: ID!

  " contract that receives funds "
  target: String!

  " msg.sender "
  initiator: String!

  " asset borrowed "
  asset: String!

  " amount of borrowed asset "
  amount: BigInt!

  " fee on the flashloan "
  premium: BigInt!

  " TX where flashloan occured "
  transactionHash: String!
}

type Liquidation @entity {
  " TX-logIndex "
  id: ID!

  " collateral asset liquidator gets "
  collateralAsset: String!

  " debt asset being underwater "
  debtAsset: String!

  " amount of bad debt covered "
  debtToCover: BigInt!

  " amount of collateral liquidated "
  liquidatedCollateralAmount: BigInt!

  " msg.sender "
  liquidator: String!

  " true if receiving aToken, false if receiveing underlying asset "
  receiveAToken: Boolean!

  " user getting liquidated "
  user: String!
}

# END - Aave protocol entities
