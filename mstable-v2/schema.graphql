# Common entities for all protocols

enum Blockchain {
  ETHEREUM
  BSC
  XDAI
  POLYGON
  OPTIMISM
  AVALANCHE
  NEAR
}

enum TokenStandard {
  ERC20
  ERC721
  ERC1155
}

enum ProtocolName {
  UNISWAP_V2
  MSTABLE
}

enum ProtocolType {
  STAKING
  LENDING
  EXCHANGE
  INSURANCE
  STABLECOIN
  DERIVATIVE
  SYNTHETIC_TOKEN
  TOKEN_MANAGEMENT  # Meta LP vaults
  PREDICTION_MARKET
}

enum PositionType {
  INVESTMENT
  DEBT
}

enum TransactionType {
  INVEST
  REDEEM
  BORROW
  REPAY
  TRANSFER_IN
  TRANSFER_OUT
}

type Account @entity {
  id: ID! # {accountAddress}
  positions: [Position!]! @derivedFrom(field: "account")
}

type Token @entity {
  id: ID! # {tokenAddress}
  tokenStandard: TokenStandard!
  name: String
  symbol: String
  decimals: Int
  mintedByMarket: Market
  blockNumber: BigInt! # could be block at which we got first event on this token
  timestamp: BigInt!
}

type Market @entity {
  id: ID! # {protocol pair/pool/vault address}
  account: Account!
  protocolName: ProtocolName!
  protocolType: ProtocolType!
  # Generally protocols accept one or multiple tokens and mint tokens to the depositor to track ownership
  # Some protocols reward DAO tokens or other incentivisation tokens to holders of LP tokens
  # Some protocols don't mint any tokens to track ownership, in that case outputToken is null 
  # and inputToken balances are used to calculate returns
  inputTokens: [Token!]!   # Tokens that need to be deposited to take a position in protocol
  outputToken: Token       # Token that is minted to track ownership of position in protocol
  rewardTokens: [Token!]   # Aditional tokens that are given as reward for position in a protocol
  inputTokenTotalBalances: [String!]!   # Total balance of this market contract of all input tokens in TokenBalance string format
  outputTokenTotalSupply: BigInt!       # Total supply of output token
  blockNumber: BigInt!
  timestamp: BigInt!
  positions: [Position!]! @derivedFrom(field: "market")
  history: [MarketSnapshot!]! @derivedFrom(field: "market")
}

type MarketSnapshot @entity {
  id: ID! # {trasactionHash}{logIndex}
  market: Market!
  inputTokenBalances: [String!]!  # TokenBalance string format
  outputTokenTotalSupply: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
  transactionHash: String!
  transactionIndexInBlock: BigInt!
  logIndex: BigInt!
}

type Transaction @entity {
  id: ID! # {account}{transactionHash}{logIndex}
  transactionHash: Bytes!
  market: Market!
  marketSnapshot: MarketSnapshot!
  # A transaction.from is always transaction origin because outside EVM transaction.origin and msg.sender are same
  from: Account!
  to: Account
  # token amounts will always be positive here, Their credit or debit status will change based on transaction type
  transactionType: TransactionType!
  inputTokenAmounts: [String!]!
  outputTokenAmount: BigInt!
  rewardTokenAmounts: [String!]!
  transferredFrom: String
  transferredTo: String
  gasUsed: BigInt!
  gasPrice: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
  transactionIndexInBlock: BigInt!
}

# String format for a TokenBalance
# tokenAddress|accountAddress|tokenAmountBigInt

# It is required because we want to keep track of closed positions as well
# We can not use same ID for a user's new position after existing one has been closed
# To be able to fetch current open position for a user + market + position type we need
# ID to be dependent on only these three things. There three things will be same for all positions
# of a specific user in specfic market therefore we need this AccountPosition entity
type AccountPosition @entity {
  id: ID! # {userAddress}{marketAddress}{positionType}
  positionCounter: BigInt!
  positions: [Position!]! @derivedFrom(field: "accountPosition")
}

# We can not keep balances and roi updated all the time. 
# We can update these only when the account of the position makes some changes in the position
# at others time when market variables are changing because of other's actions then we won't update these
type Position @entity {
  id: ID! # {accountPositionId}{autoIncrement}
  accountPosition: AccountPosition!
  account: Account!
  accountAddress: String!
  market: Market!
  marketAddress: String!
  positionType: PositionType!
  outputTokenBalance: BigInt!
  inputTokenBalances: [String!]!    # TokenBalance string format
  rewardTokenBalances: [String!]!   # TokenBalance string format
  closed: Boolean!
  blockNumber: BigInt!
  timestamp: BigInt!
  historyCounter: BigInt!
  history: [PositionSnapshot!]! @derivedFrom(field: "position")
}

# Created before every update (transaction) to Position
type PositionSnapshot @entity {
  id: ID! # {positionId}{autoIncrement}
  position: Position!
  transaction: Transaction!
  outputTokenBalance: BigInt!
  inputTokenBalances: [String!]!    # TokenBalance string format
  rewardTokenBalances: [String!]!   # TokenBalance string format
}

# MStable protocol entities

type MAsset @entity {
  id: ID! # {proxy contract address}
  impl: String! # {impl contract address}
  basketManager: String!
  bAssets: [String!]!
  forgeValidator: String!
  bAssetBalances: [String!]!
  totalSupply: BigInt!
  swapFee: BigInt!
  lastTransferToZero: Redeem
}

type AccountLiquidity @entity {
  id: ID! # {mAssetAddress}{accoutnAddress}
  mAsset: MAsset!
  account: Account!
  balance: BigInt!
}

type Redeem @entity {
  id: ID! # {mAssetAddress}{transaction hash}
  mAsset: MAsset!
  redeemer: String
  recipient: String
  mAssetQuantity: BigInt
  bAssets: [String!]!
  bAssetQuantities: [BigInt!]!
  eventLogIndex: BigInt
  transactionLogIndex: BigInt
  redeemEventApplied: Boolean!
  decreaseVaultCallApplied: Boolean!
}

type Swap @entity {
  id: ID! # {mAssetAddress}{transaction hash}
  mAsset: MAsset!
  inputBAsset: String
  outputBAsset: String
  inputAmount: BigInt
  outputAmount: BigInt
  eventLogIndex: BigInt
  transactionLogIndex: BigInt
  swapEventApplied: Boolean!
  swapCallApplied: Boolean!
}

# Interest bearing mAsset
type IMAsset @entity {
  id: ID! #{IMasset address}
  mAsset: MAsset!
  totalSavings: BigInt!
  totalSupply: BigInt!
  exchangeRate: BigInt!
}

type AccountLiquidityIMAsset @entity {
  id: ID! # {imAssetAddress}{accoutnAddress}
  imAsset: IMAsset!
  account: Account!
  balance: BigInt!
}

# Interest bearing mAsset
type VIMAsset @entity {
  id: ID! #{IMasset address}
  imAsset: IMAsset!
  rewardToken: String!
  imAssetBalance: BigInt!
  rewardBalance: BigInt!
  totalSupply: BigInt!
}

type AccountLiquidityVIMAsset @entity {
  id: ID! # {imAssetAddress}{accoutnAddress}
  vimAsset: VIMAsset!
  account: Account!
  balance: BigInt!
}

type FeederPool @entity {
  id: ID! # {proxy contract address}
  impl: String! # {impl contract address}
  mAsset: String!
  fAsset: String!
  mAssetBalance: BigInt!
  fAssetBalance: BigInt!
  totalSupply: BigInt!
  lastTransferToZero: Redeem
}

type AccountLiquidityFP @entity {
  id: ID! # {mAssetAddress}{accoutnAddress}
  mAsset: FeederPool!
  account: Account!
  balance: BigInt!
}

type FPSwap @entity {
  id: ID! # {mAssetAddress}{transaction hash}
  mAsset: FeederPool!
  inputBAsset: String
  outputBAsset: String
  inputAmount: BigInt
  outputAmount: BigInt
  eventLogIndex: BigInt
  transactionLogIndex: BigInt
  swapEventApplied: Boolean!
  swapCallApplied: Boolean!
}

type FPTransferToZero @entity {
  id: ID! # {mAssetAddress}{transaction hash}
  mAsset: FeederPool!
  redeemer: String
  recipient: String
  mAssetQuantity: BigInt
  eventLogIndex: BigInt
  transactionLogIndex: BigInt
}

# END - MStable protocol entities